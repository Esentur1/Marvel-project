{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","components/errorBoundary/ErrorBoundary.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","utils/setContent.js","components/charList/CharList.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/searchCharPanel/SearchCharPanel.js","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","alt","useHttp","useState","loading","setLoading","error","setError","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","item","_transformCharacter","getCharacter","id","getAllComics","_transformComic","getComic","findNameCharacter","name","length","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","slice","comic","title","price","prices","page","pageCount","Skeleton","className","ErrorBoundary","state","errorInfo","console","log","this","setState","props","children","Component","View","imgStyle","style","objectFit","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","content","onClick","mjolnir","setContent","CharItem","React","forwardRef","ref","onCharSelected","focusCharSelected","CharList","chars","setChars","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onCharList","itemsRef","useRef","setRef","current","push","onRequest","onCharListLoaded","newChars","ended","initial","elements","TransitionGroup","component","i","CSSTransition","timeout","classNames","forEach","classList","remove","add","focus","disabled","CharInfo","charId","SearchCharPanel","setchar","foundCharacterMessage","setfoundCharacterMessage","findEndChar","messageFoundResponse","Object","keys","to","initialValues","validationSchema","Yup","required","onSubmit","values","htmlFor","type","placeholder","MainPage","selectedChar","setSelectedChar","decoration"],"mappings":"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","file":"static/js/5.ca22c254.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img  src={img} alt=\"Error\"></img>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback } from \"react\";\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`) \r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null)\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=9fa8a4e7dd4fa0ac1bd263c9c97fcd0f\";\r\n    const _baseOffset = 210;\r\n    const _baseComicsOffset = 0;\r\n\r\n    //getAllCharacters Получает списки комических персонажей с дополнительными фильтрами\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(item => _transformCharacter(item));\r\n    } \r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n    \r\n    const getAllComics = async (offset = _baseComicsOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(item => _transformComic(item));\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const findNameCharacter = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        if (res.data.results.length === 0) {\r\n            return {\r\n                name: \"not found\"\r\n            }\r\n        }\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === \"\") {\r\n            return {\r\n                id: char.id,\r\n                name: char.name,\r\n                description: \"No character description\",\r\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                homepage: char.urls[0].url,\r\n                wiki: char.urls[1].url,\r\n                comics: char.comics.items\r\n            }\r\n        } \r\n\r\n        if (char.description.length > 225) {\r\n            return {\r\n                id: char.id,\r\n                name: char.name,\r\n                description: char.description.slice(0, 225) + \"...\",\r\n                thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                homepage: char.urls[0].url,\r\n                wiki: char.urls[1].url,\r\n                comics: char.comics.items\r\n            }\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: !comic.description ? \"No character description\" \r\n                : comic.description.length > 255 \r\n                    ? comic.description.slice(0, 255) + \"...\" \r\n                    : comic.description,\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price:comic.prices[0].price,\r\n            page: comic.pageCount\r\n        }\r\n    }\r\n\r\n    return {loading, \r\n        error, \r\n        process,\r\n        setProcess, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        clearError, \r\n        getAllComics, \r\n        getComic, \r\n        findNameCharacter};\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect} from 'react';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = (props) => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null; \n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n    let imgStyle = \"\";\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = <img style ={{objectFit: \"contain\"}} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n    } else {\n        imgStyle = <img style ={{objectFit: \"cover\"}} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n                {imgStyle}\n                <div className=\"randomchar__info\">\n                    <p className=\"randomchar__name\">{name}</p>\n                    <p className=\"randomchar__descr\">\n                        {description}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n        </div>\n    )\n}\n\n\nexport default RandomChar;","import Spinner from '../components/spinner/spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import './charList.scss';\nimport PropTypes from 'prop-types';\nimport React, {useState, useEffect, useRef} from 'react';\nimport {CSSTransition,TransitionGroup} from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService'; \nimport Spinner from '../spinner/spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport setContent from '../../utils/setContent';\n\n\nconst CharList = (props) => {\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [openCss, setOpenCss] = useState(false);\n    const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onCharList();\n    }, [])\n\n    const itemsRef = useRef([]);\n\n    const setRef = (ref) => {\n        if (ref) {\n            itemsRef.current.push(ref);\n        }\n    }\n\n    const focusCharSelected = (id) => {\n        itemsRef.current.forEach(item => {\n            item.classList.remove(\"char__item_selected\");\n        })\n        itemsRef.current[id].classList.add(\"char__item_selected\");\n        itemsRef.current[id].focus();\n    }\n\n    const onCharList = () => {\n        onRequest(offset, true);\n    }\n\n    const onCharListLoaded = (newChars) => {\n\n        let ended = false;\n\n        if (newChars.length < 9) {\n            ended = true;\n        }\n        setChars(chars => [...chars, ...newChars]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const {onCharSelected} = props;\n\n    // const elements = <TransitionGroup>chars.map((item, i) => {\n    //     let imgStyle = \"\";\n    //     if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n    //         imgStyle = <img style ={{objectFit: \"contain\"}} src={item.thumbnail} alt=\"No character description\"/>\n    //     } else {\n    //         imgStyle = <img style ={{objectFit: \"cover\"}} src={item.thumbnail} alt=\"No character description\"/>\n    //     }\n    //     return (\n    //         <CharItem \n    //         ref={setRef}\n    //         name={item.name} \n    //         imgStyle={imgStyle} \n    //         key={item.id} \n    //         onCharSelected={() => onCharSelected(item.id)}\n    //         focusCharSelected={() => focusCharSelected(i)}\n    //         />\n    //     )\n    // })</TransitionGroup>\n    const elements = <TransitionGroup component={null}>\n        {chars.map((item, i) => {\n            let imgStyle = \"\";\n                if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                    imgStyle = <img style ={{objectFit: \"contain\"}} src={item.thumbnail} alt=\"No character description\"/>\n                } else {\n                    imgStyle = <img style ={{objectFit: \"cover\"}} src={item.thumbnail} alt=\"No character description\"/>\n                }\n            return (\n                <CSSTransition key={item.id} timeout={2000} classNames=\"fade\">\n                    <CharItem\n                    ref={setRef}\n                    name={item.name}\n                    imgStyle={imgStyle}\n                    key={item.id}\n                    onCharSelected={() => onCharSelected(item.id)}\n                    focusCharSelected={() => focusCharSelected(i)}/>\n                </CSSTransition>\n            )\n        })}\n    </TransitionGroup>\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const content = loading && !newItemLoading ? <Spinner/> : <ul className='char__grid'>{elements}</ul>\n\n    console.log(\"CharList!\")\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {content}\n            <button \n            className=\"button button__main button__long\"\n            disabled={newItemLoading}\n            onClick={() => onRequest(offset)}\n            style={{'display': charEnded ? 'none' : 'block'}}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n    \n}\n\nconst CharItem = React.forwardRef((props, ref) => {\n    const {name, imgStyle, onCharSelected, focusCharSelected} = props;\n    return (\n        <li className=\"char__item\" \n        onClick={() => {\n            onCharSelected()\n            focusCharSelected()\n        }} \n        ref={ref}\n        >\n            {imgStyle}\n            <div className=\"char__name\">{name}</div>\n        </li>\n    )\n})\n\n// class CharItem extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n\n//     render() {\n//         const {name, imgStyle, onCharSelected} = this.props;\n//         return (\n//             <li className=\"char__item\" onClick={\n//             () => \n//             {onCharSelected()}}>\n//                 {imgStyle} <div className=\"char__name\">{name}</div>\n//             </li>\n//         )\n//     }\n\n// }\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService'; \nimport { useState, useEffect} from 'react';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <>\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n        </>\n    )\n    \n    \n}\n\nconst View = ({data}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = \"\";\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = <img style ={{objectFit: \"contain\"}} src={thumbnail} alt={name}/>\n    } else {\n        imgStyle = <img style ={{objectFit: \"cover\"}} src={thumbnail} alt={name}/>\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    {imgStyle}\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {   \n                        comics.length === 0 ? <li className=\"char__comics-item\" >This character does not have a comic book list</li>:\n                        comics.length > 10 ? \n                        comics.slice(0, 10).map((item, i) => {return (\n                            <li className=\"char__comics-item\" key={i}>\n                                {item.name}\n                            </li>\n                        )}) :\n                        comics.map((item, i) => {\n                            return (\n                                <li className=\"char__comics-item\" key={i}>\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState, useEffect, useRef} from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport \"./searchCharPanel.scss\"\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport {Link}  from \"react-router-dom\"\r\nimport * as Yup from 'yup'\r\n\r\n// const validate = values => {\r\n//     const errors = {};\r\n\r\n//     if (!values.name) {\r\n//         errors.name = \"This field is required\"\r\n//     } \r\n\r\n//     return errors;\r\n// }\r\n\r\nconst SearchCharPanel = (props) => {\r\n    const [char, setchar] = useState({});\r\n    const [foundCharacterMessage, setfoundCharacterMessage] = useState(false);\r\n    const [notField, setNotField] = useState(false);\r\n    const {loading, error, findNameCharacter} = useMarvelService();\r\n\r\n\r\n    const findEndChar = (char) => {\r\n        setchar(char);\r\n        console.log(char.name)\r\n        if (char.name === \"not found\") {\r\n            setfoundCharacterMessage(true)\r\n        } else {\r\n            setfoundCharacterMessage(false)\r\n        }\r\n    }\r\n    const onRequest = (name) => {\r\n        findNameCharacter(name)\r\n            .then(findEndChar)\r\n    }\r\n    // const messageFoundResponse = foundCharacterMessage \r\n    //     ? <div className='searchcharpanel__validate-error'>The character was not found. Check the name and try again</div> \r\n    //         : <div className='searchcharpanel__validate-error'>There is! Visit page?</div> \r\n    const messageFoundResponse = (char, message) => {\r\n        if (message) {\r\n            return <div className='searchcharpanel__validate-error'>The character was not found. Check the name and try again</div>\r\n        } else if (Object.keys(char).length === 0 ) {\r\n            return null\r\n        }\r\n        return (\r\n        <>\r\n        <div className='searchcharpanel__positive'>There is! Visit {char.name} page?</div>\r\n        <Link className=\"button button__secondary searchcharpanel__link\" to={`/${char.id}`}>\r\n            <div className=\"inner\">TO PAGE</div>\r\n        </Link>\r\n        </>\r\n        )\r\n    }\r\n    return (\r\n        <Formik\r\n        initialValues = {{\r\n            name: \"\"\r\n        }}\r\n        validationSchema = {Yup.object({\r\n            name: Yup.string().required('This field is required')\r\n        })}\r\n        onSubmit = {values => onRequest(values.name)}\r\n        >\r\n            <Form className=\"searchcharpanel\">\r\n                <label className=\"searchcharpanel__label\" htmlFor=\"search\">Or find a character by name:</label>\r\n                <Field \r\n                className=\"searchcharpanel__input\" \r\n                type=\"text\" \r\n                placeholder='Enter name' \r\n                id='name'\r\n                name='name'\r\n                />\r\n                <button \r\n                className=\"button button__main searchcharpanel__button\"\r\n                type=\"submit\"\r\n                >\r\n                    <div className=\"inner\">FIND</div>\r\n                </button>\r\n                {messageFoundResponse(char, foundCharacterMessage) \r\n                ? messageFoundResponse(char, foundCharacterMessage) \r\n                : <ErrorMessage className='searchcharpanel__validate-error' name=\"name\" component='div'/>}\r\n                \r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default SearchCharPanel;\r\n\r\n","import { useState} from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport SearchCharPanel from \"../searchCharPanel/SearchCharPanel\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div className=\"char__details\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <SearchCharPanel/>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}